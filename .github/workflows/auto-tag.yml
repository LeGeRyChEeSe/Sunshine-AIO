name: Auto Tag on Version Change

on:
  push:
    branches: [ main ]
    paths: 
      - 'src/misc/__init__.py'
  # D√©clencheur manuel pour les tests
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Test mode (no tag creation)'
        required: false
        default: true
        type: boolean

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permission to create tags and push to repo
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from __init__.py
      id: get_version
      run: |
        VERSION=$(grep -oP '__version__ = "\K[^"]+' src/misc/__init__.py)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"
    
    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse --verify "refs/tags/${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag ${{ steps.get_version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag ${{ steps.get_version.outputs.version }} does not exist"
        fi
    
    - name: Extract changelog for current version
      id: changelog
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # Extract changelog section for current version
        if [ -f "CHANGELOG.md" ]; then
          # First try to get from "Latest Release" section (most recent version)
          LATEST_CONTENT=$(awk '
            /^## Latest Release/ { in_latest=1; next }
            in_latest && /^---/ { in_latest=0 }
            in_latest && /^### / { 
              if (match($0, /### (v[0-9]+\.[0-9]+\.[0-9]+)/, arr)) {
                if (arr[1] == "'"$VERSION"'") { 
                  found_version=1; next 
                }
              }
            }
            in_latest && found_version { print }
          ' CHANGELOG.md)
          
          # If not found in Latest Release, try All Releases section
          if [ -z "$LATEST_CONTENT" ]; then
            CHANGELOG_CONTENT=$(awk "
              /^### $VERSION/ { found=1; next }
              found && /^### / { found=0 }
              found && /^#### / { print; next }
              found && /^- / { print; next }
              found && /^  - / { print; next }
            " CHANGELOG.md)
          else
            CHANGELOG_CONTENT="$LATEST_CONTENT"
          fi
          
          # Clean up and format for GitHub
          if [ -n "$CHANGELOG_CONTENT" ]; then
            # Convert markdown formatting for better GitHub display
            FORMATTED_CONTENT=$(echo "$CHANGELOG_CONTENT" | \
              sed 's/^\*\*\([^*]*\)\*\*:/## \1/g' | \
              sed 's/^\*\*\([^*]*\)\*\*/### \1/g' | \
              sed 's/^- \*\*\([^*]*\)\*\*:/‚Ä¢ **\1:**/g' | \
              sed 's/^  - /  ‚Ä¢ /g' | \
              sed 's/^- /‚Ä¢ /g' | \
              sed '/^$/d' | \
              head -30)
            
            {
              echo "changelog<<EOF"
              echo "$FORMATTED_CONTENT"
              echo "EOF"
            } >> $GITHUB_OUTPUT
            echo "‚úÖ Found changelog for version $VERSION"
          else
            echo "changelog=üÜï New version released with improvements and bug fixes." >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No specific changelog found for version $VERSION, using default message"
          fi
        else
          echo "changelog=üÜï New version released with improvements and bug fixes." >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è CHANGELOG.md not found, using default message"
        fi
    
    - name: Create and push tag with changelog
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # V√©rifier si c'est un test manuel
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "üß™ DRY RUN MODE - No tag will be created"
          echo "üìã Tag that would be created: ${{ steps.get_version.outputs.version }}"
          echo "üìù Message that would be used:"
          echo "Release ${{ steps.get_version.outputs.version }}"
          echo ""
          echo "${{ steps.changelog.outputs.changelog }}"
          echo "‚úÖ Test completed successfully - no actual tag created"
        else
          # Create tag with changelog as message
          TAG_MESSAGE="Release ${{ steps.get_version.outputs.version }}
        
        ${{ steps.changelog.outputs.changelog }}"
          
          git tag -a "${{ steps.get_version.outputs.version }}" -m "$TAG_MESSAGE"
          git push origin "${{ steps.get_version.outputs.version }}"
          echo "‚úÖ Created and pushed tag: ${{ steps.get_version.outputs.version }}"
          echo "üìù Tag includes changelog content"
        fi
    
    - name: Tag already exists
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "‚ÑπÔ∏è Tag ${{ steps.get_version.outputs.version }} already exists, skipping creation"